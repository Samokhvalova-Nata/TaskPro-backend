{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Task Pro",
    "description": "API documentation for GoIT project **Task Pro**",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "servers": [
    {
      "url": "https://askpro-backend.onrender.com"
    },
    {
      "url": "https://localhost:5000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Users endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns endpoints"
    },
    {
      "name": "Cards",
      "description": "Cards endpoints"
    }
  ],
  "paths": {
    "/api/users/singup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created, registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSignupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorNotFound"
                }
              }
            }
          },
          "409": {
            "description": "Such email is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorConflict"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created, registration successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnautorized"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnautorized"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/current": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get user data by token",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "responses": {
          "200": {
            "description": "User exists in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSignInResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnautorized"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/": {
      "patch": {
        "tags": [
          "Auth"
        ],
        "summary": "Change user theme",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Array's theme",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTheme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User exists in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSignInResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnautorized"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/update": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update user profile",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Array's theme",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successful apdate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnautorized"
                }
              }
            }
          }
        }
      }
    },
    "/api/boards": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get all user boards",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "responses": {
          "200": {
            "description": "User exists in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllfBoards"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Boards"
        ],
        "summary": "Add new board",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Board's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBoardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAddBoard"
                }
              }
            }
          }
        }
      }
    },
    "/api/boards{id}": {
      "get": {
        "tags": [
          "Boards"
        ],
        "summary": "Get user board by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Board's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardById"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBoardNotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Boards"
        ],
        "summary": "Delete board",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Board's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "responses": {
          "200": {
            "description": "Board deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteBoardById"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBoardNotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Boards"
        ],
        "summary": "Update board by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Board's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleid"
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Board's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBoardUpdate"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorBoardUpdateById"
                }
              }
            }
          }
        }
      }
    },
    "/api/columns": {
      "post": {
        "tags": [
          "Columns"
        ],
        "summary": "Add new column",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Column's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddColumnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedNewColumn"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestColumn"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundColumn"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorConflictColumn"
                }
              }
            }
          }
        }
      }
    },
    "/api/columns{id}": {
      "delete": {
        "tags": [
          "Columns"
        ],
        "summary": "Delete column",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Column's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteColumn"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundColumn"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Columns"
        ],
        "summary": "Update column by id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Column's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleId"
          }
        ],
        "requestBody": {
          "description": "Column's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update column",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessUpdateColumn"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestColumn"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNotFoundColumn"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Add new cards",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          }
        ],
        "requestBody": {
          "description": "Column's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedNewCard"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestCard"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundCard"
                }
              }
            }
          }
        }
      }
    },
    "/api/cards{id}": {
      "delete": {
        "tags": [
          "Cards"
        ],
        "summary": "Delete cards",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Cards's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedNewCard"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundCard"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cards"
        ],
        "summary": "Update cards by id",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The token issued to the current user",
            "schema": {
              "type": "string"
            },
            "example": "exampletoken"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Card's id",
            "schema": {
              "type": "string"
            },
            "example": "exampleId"
          }
        ],
        "requestBody": {
          "description": "Card's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update column",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessUpdateColumn"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestColumn"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNotFoundColumn"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserSignupRequest": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "examplename"
          },
          "email": {
            "type": "string",
            "description": "user's email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "examplepassword"
          }
        }
      },
      "UserSignupResponse": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user's id in database",
            "example": "exampleid"
          },
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "examplename"
          },
          "email": {
            "type": "string",
            "description": "user's email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "$2b$10$CU0iS5W90rQGilkcOB6r.uHwS4uQwmWbTKj3UAv3aynxLzI2lBSzu"
          },
          "userTheme": {
            "type": "string",
            "description": "user's theme",
            "example": "light"
          },
          "createdAt": {
            "type": "string",
            "description": "date create user",
            "example": "2023-08-26T16:42:43.050Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "date update user",
            "example": "2023-08-26T16:42:44.042Z"
          },
          "token": {
            "type": "string",
            "description": "user's token",
            "example": "exampletoken"
          }
        }
      },
      "ErrorBadRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Bad request or description of error"
          }
        }
      },
      "ErrorNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not found"
          }
        }
      },
      "ErrorConflict": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Such email {email} is already registered"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "user's email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "examplepassword"
          }
        }
      },
      "UserSignInResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "user's token",
            "example": "exampletoken"
          },
          "user": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "description": "user's id in database",
                "example": "exampleid"
              },
              "name": {
                "type": "string",
                "description": "user's name",
                "example": "examplename"
              },
              "email": {
                "type": "string",
                "description": "user's email",
                "example": "example@example.com"
              },
              "userTheme": {
                "type": "string",
                "description": "user's theme",
                "example": "exampletheme"
              },
              "avatarURL": {
                "type": "string",
                "example": "http:://exampleURL",
                "description": "link to user's avatar"
              }
            }
          }
        }
      },
      "ErrorUnautorized": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Unautorized. Email or password is wrong"
          }
        }
      },
      "ErrorAddBoard": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error add new board",
            "example": "Missing required title field"
          }
        }
      },
      "ChangeTheme": {
        "type": "object",
        "required": [
          "userTheme"
        ],
        "properties": {
          "userTheme": {
            "type": "string",
            "description": "User's theme",
            "enum": [
              "light",
              "dark",
              "violet"
            ],
            "example": "light"
          }
        }
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "exampleuser"
          },
          "email": {
            "type": "string",
            "description": "user's email",
            "example": "example@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "examplepassword"
          },
          "avatar": {
            "type": "string",
            "description": "user's avatar",
            "example": "link to user's avatar"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "user's token",
            "example": "exampletoken"
          },
          "user": {
            "properties": {
              "user_id": {
                "type": "string",
                "description": "user's id in database",
                "example": "exampleid"
              },
              "name": {
                "type": "string",
                "description": "user's name",
                "example": "examplename"
              },
              "email": {
                "type": "string",
                "description": "user's email",
                "example": "example@example.com"
              },
              "password": {
                "type": "string",
                "description": "user's password",
                "example": "examplepassword"
              },
              "userTheme": {
                "type": "string",
                "description": "user's theme",
                "example": "light"
              }
            }
          }
        }
      },
      "GetAllfBoards": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Board's id",
              "example": "64d360ea78fe376e4981199f"
            },
            "title": {
              "type": "string",
              "description": "Board's title",
              "example": "First Board"
            },
            "icon": {
              "type": "string",
              "description": "Board's icons",
              "example": "First Board"
            },
            "background": {
              "type": "string",
              "description": "Board's background",
              "example": "examplebackground"
            },
            "owner": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "owner's id",
                  "example": "exampleid"
                },
                "name": {
                  "type": "string",
                  "description": "owner's name",
                  "example": "examplename"
                },
                "email": {
                  "type": "string",
                  "description": "owner's email",
                  "example": "example@example.com"
                },
                "avatarURL": {
                  "type": "string",
                  "description": "owner's avatar",
                  "example": "link to user's avatar"
                },
                "userTheme": {
                  "type": "string",
                  "description": "user's theme",
                  "example": "exampletheme"
                }
              }
            }
          }
        }
      },
      "GetBoardById": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "exampletitle"
          },
          "icon": {
            "type": "string",
            "description": "Board's icons",
            "example": "exampleicon"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "example": "examplebackground"
          },
          "owner": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "owner's id",
                "example": "exampleid"
              },
              "name": {
                "type": "string",
                "description": "owner's name",
                "example": "examplename"
              },
              "email": {
                "type": "string",
                "description": "owner's email",
                "example": "example@example.com"
              },
              "avatarURL": {
                "type": "string",
                "description": "owner's avatar",
                "example": "link to user's avatar"
              },
              "userTheme": {
                "type": "string",
                "description": "user's theme",
                "example": "exampletheme"
              },
              "columns": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "owner's id",
                      "example": "exampleid"
                    },
                    "title": {
                      "type": "string",
                      "description": "Columns's title",
                      "example": "exampletitle"
                    },
                    "cards": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "Card's id",
                            "example": "exampleid"
                          },
                          "title": {
                            "type": "string",
                            "description": "Card's title",
                            "example": "exampletitle"
                          },
                          "description": {
                            "type": "string",
                            "description": "Card's description",
                            "example": "exampledescription"
                          },
                          "priority": {
                            "type": "string",
                            "description": "Card's priority",
                            "example": "examplepriority"
                          },
                          "deadline": {
                            "type": "string",
                            "description": "Card's deadline",
                            "example": "DD-MM-YYYY"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddBoardRequest": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "board's title",
            "example": "exampletitle"
          },
          "icon": {
            "type": "string",
            "description": "board's icon",
            "example": "exampleicon",
            "enum": [
              "project",
              "star",
              "loading",
              "puzzle-piece",
              "container",
              "lightning",
              "colors",
              "hexagon"
            ]
          },
          "background": {
            "type": "string",
            "description": "board's",
            "example": "examplebackground",
            "enum": [
              "no-background",
              "magnolia",
              "starry-sky",
              "sakura",
              "half-moon",
              "palm-leaves",
              "clouds",
              "rocky-beach",
              "violet-circle",
              "full-moon",
              "yacht",
              "baloon",
              "mountains",
              "sea",
              "cappodocia",
              "night-trailer"
            ]
          }
        }
      },
      "AddBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "exampletitle"
          },
          "icon": {
            "type": "string",
            "description": "Board's icons",
            "example": "exampleicon"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "example": "link to background"
          },
          "owner": {
            "type": "string",
            "description": "Board's owner",
            "example": "exampleid"
          }
        }
      },
      "ErrorBoardNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Board with id not found"
          }
        }
      },
      "ErrorBoardUpdate": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Missing fields"
          }
        }
      },
      "DeleteBoardById": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Board deleted",
            "example": "Board deleted"
          }
        }
      },
      "UpdateBoardRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "anyfielsd",
            "example": "examplename"
          }
        }
      },
      "UpdateBoardResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Board's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Board's title",
            "example": "exampletitle"
          },
          "icon": {
            "type": "string",
            "description": "Board's icons",
            "example": "exampleicon"
          },
          "background": {
            "type": "string",
            "description": "Board's background",
            "example": "link to background"
          },
          "owner": {
            "type": "string",
            "description": "Board's owner",
            "example": "exampleid"
          }
        }
      },
      "ErrorBoardUpdateById": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error Board Update By Id",
            "example": "Board with id not found"
          }
        }
      },
      "AddColumnRequest": {
        "type": "object",
        "required": [
          "title",
          "board"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "exampletitle"
          },
          "board": {
            "type": "string",
            "description": "Board's id",
            "example": "exampleid"
          }
        }
      },
      "CreatedNewColumn": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "exampletitle"
          },
          "board": {
            "type": "string",
            "description": "Boards's id",
            "example": "exampleid"
          }
        }
      },
      "BadRequestColumn": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "missing required field"
          }
        }
      },
      "NotFoundColumn": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Such board with id does not exist"
          }
        }
      },
      "ErrorConflictColumn": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Such column with title is already added"
          }
        }
      },
      "DeleteColumn": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Delete Column",
            "example": "Column successfully deleted"
          },
          "deletedId": {
            "type": "string",
            "description": "Column's id",
            "example": "exampleid"
          }
        }
      },
      "UpdateColumnRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "exampletitle"
          }
        }
      },
      "UpdateNotFoundColumn": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Column with id not found",
            "example": "Column with id not found"
          }
        }
      },
      "SucessUpdateColumn": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Column's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Column's title",
            "example": "exampletitle"
          },
          "board": {
            "type": "string",
            "description": "boardoard's id",
            "example": "exampleid"
          }
        }
      },
      "AddCardsRequest": {
        "type": "object",
        "required": [
          "title",
          "description",
          "column"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "exampletitle"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "exampledescription"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "example": "examplepriority",
            "enum": [
              "without priority",
              "low",
              "medium",
              "high"
            ]
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "DD-MM-YYYY"
          },
          "column": {
            "type": "string",
            "description": "Column's id",
            "example": "exampleId"
          }
        }
      },
      "CreatedNewCard": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Card's id",
            "example": "exampleid"
          },
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "exampletitle"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "exampledescription"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "example": "examplepriority"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "DD-MM-YYYY"
          },
          "column": {
            "type": "string",
            "description": "Card's id",
            "example": "exampleId"
          }
        }
      },
      "BadRequestCard": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "missing required field"
          }
        }
      },
      "NotFoundCard": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Column with id not found"
          }
        }
      },
      "UpdateCardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Card's title",
            "example": "exampletitle"
          },
          "description": {
            "type": "string",
            "description": "Card's description",
            "example": "exampledescription"
          },
          "priority": {
            "type": "string",
            "description": "Card's priority",
            "example": "examplepriority"
          },
          "deadline": {
            "type": "string",
            "description": "Card's deadline",
            "example": "DD-MM-YYYY"
          }
        }
      }
    }
  }
}